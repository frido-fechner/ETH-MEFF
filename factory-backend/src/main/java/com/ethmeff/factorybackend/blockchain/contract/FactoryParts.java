package com.ethmeff.factorybackend.blockchain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class FactoryParts extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611fe9806100606000396000f3fe608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063228f2ddb14610067578063ab9f2cfe146100a4578063c02f63f8146100e6578063d8f9d14414610123575b600080fd5b34801561007357600080fd5b5061008e60048036036100899190810190611991565b610160565b60405161009b9190611c84565b60405180910390f35b3480156100b057600080fd5b506100cb60048036036100c691908101906118fc565b6106bb565b6040516100dd96959493929190611d0d565b60405180910390f35b3480156100f257600080fd5b5061010d600480360361010891908101906118fc565b610a17565b60405161011a9190611c84565b60405180910390f35b34801561012f57600080fd5b5061014a6004803603610145919081019061193d565b610f4e565b6040516101579190611c84565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ea90611da3565b60405180910390fd5b6101fb611498565b6001876040518082805190602001908083835b602083101515610233578051825260208201915060208101905060208303925061020e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060c06040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561030b5780601f106102e05761010080835404028352916020019161030b565b820191906000526020600020905b8154815290600101906020018083116102ee57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016003820180548060200260200160405190810160405280929190818152602001828054801561041457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103ca575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156104fe578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b505050505081526020019060010190610442565b505050508152505090508581600001819052508481602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160800181905250828160a001819052506000816060019015159081151581525050806001886040518082805190602001908083835b6020831015156105af578051825260208201915060208101905060208303925061058a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906105fe9291906114e7565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550608082015181600301908051906020019061068c929190611567565b5060a08201518160040190805190602001906106a99291906115f1565b50905050600191505095945050505050565b606060008060006060806106cd611498565b6001886040518082805190602001908083835b60208310151561070557805182526020820191506020810190506020830392506106e0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060c06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107dd5780601f106107b2576101008083540402835291602001916107dd565b820191906000526020600020905b8154815290600101906020018083116107c057829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382018054806020026020016040519081016040528092919081815260200182805480156108e657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161089c575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156109d0578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109bc5780601f10610991576101008083540402835291602001916109bc565b820191906000526020600020905b81548152906001019060200180831161099f57829003601f168201915b505050505081526020019060010190610914565b50505050815250509050806000015181602001518260400151836060015184608001518560a001518595508191508090509650965096509650965096505091939550919395565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa190611da3565b60405180910390fd5b610ab2611498565b6001836040518082805190602001908083835b602083101515610aea5780518252602082019150602081019050602083039250610ac5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060c06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1615151515815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ccb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c81575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610db5578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b505050505081526020019060010190610cf9565b5050505081525050905060018160600190151590811515815250507f335bde9076cb678512bc2e7a710c09fb60e557abcdf1b1b8e761c2ef5729a46c838260400151604051610e05929190611c9f565b60405180910390a1806001846040518082805190602001908083835b602083101515610e465780518252602082019150602081019050602083039250610e21565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190610e959291906114e7565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019080519060200190610f23929190611567565b5060a0820151816004019080519060200190610f409291906115f1565b509050506001915050919050565b6000610f58611498565b6001846040518082805190602001908083835b602083101515610f905780518252602082019150602081019050602083039250610f6b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060c06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110685780601f1061103d57610100808354040283529160200191611068565b820191906000526020600020905b81548152906001019060200180831161104b57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016003820180548060200260200160405190810160405280929190818152602001828054801561117157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611127575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561125b578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112475780601f1061121c57610100808354040283529160200191611247565b820191906000526020600020905b81548152906001019060200180831161122a57829003601f168201915b50505050508152602001906001019061119f565b50505050815250509050806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d090611d83565b60405180910390fd5b60008160400151905083826040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816001866040518082805190602001908083835b602083101515611353578051825260208201915060208101905060208303925061132e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906113a29291906114e7565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019080519060200190611430929190611567565b5060a082015181600401908051906020019061144d9291906115f1565b509050507ff86060286164733a3b0bae3ba4b62f85dc6020ba2ee440318bf5b6be6d0d93a885828660405161148493929190611ccf565b60405180910390a160019250505092915050565b60c0604051908101604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061152857805160ff1916838001178555611556565b82800160010185558215611556579182015b8281111561155557825182559160200191906001019061153a565b5b5090506115639190611651565b5090565b8280548282559060005260206000209081019282156115e0579160200282015b828111156115df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611587565b5b5090506115ed9190611676565b5090565b828054828255906000526020600020908101928215611640579160200282015b8281111561163f57825182908051906020019061162f9291906114e7565b5091602001919060010190611611565b5b50905061164d91906116b9565b5090565b61167391905b8082111561166f576000816000905550600101611657565b5090565b90565b6116b691905b808211156116b257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161167c565b5090565b90565b6116e291905b808211156116de57600081816116d591906116e5565b506001016116bf565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061170b575061172a565b601f0160209004906000526020600020908101906117299190611651565b5b50565b60006117398235611f40565b905092915050565b600082601f830112151561175457600080fd5b813561176761176282611df0565b611dc3565b9150818183526020840193506020810190508385602084028201111561178c57600080fd5b60005b838110156117bc57816117a2888261172d565b84526020840193506020830192505060018101905061178f565b5050505092915050565b600082601f83011215156117d957600080fd5b81356117ec6117e782611e18565b611dc3565b9150818183526020840193506020810190508360005b8381101561183257813586016118188882611850565b845260208401935060208301925050600181019050611802565b5050505092915050565b60006118488235611f52565b905092915050565b600082601f830112151561186357600080fd5b813561187661187182611e40565b611dc3565b9150808252602083016020830185838301111561189257600080fd5b61189d838284611f5c565b50505092915050565b600082601f83011215156118b957600080fd5b81356118cc6118c782611e6c565b611dc3565b915080825260208301602083018583830111156118e857600080fd5b6118f3838284611f5c565b50505092915050565b60006020828403121561190e57600080fd5b600082013567ffffffffffffffff81111561192857600080fd5b611934848285016118a6565b91505092915050565b6000806040838503121561195057600080fd5b600083013567ffffffffffffffff81111561196a57600080fd5b611976858286016118a6565b92505060206119878582860161172d565b9150509250929050565b600080600080600060a086880312156119a957600080fd5b600086013567ffffffffffffffff8111156119c357600080fd5b6119cf888289016118a6565b955050602086013567ffffffffffffffff8111156119ec57600080fd5b6119f8888289016118a6565b9450506040611a098882890161183c565b935050606086013567ffffffffffffffff811115611a2657600080fd5b611a3288828901611741565b925050608086013567ffffffffffffffff811115611a4f57600080fd5b611a5b888289016117c6565b9150509295509295909350565b611a7181611ef8565b82525050565b6000611a8282611eb2565b808452602084019350611a9483611e98565b60005b82811015611ac657611aaa868351611a68565b611ab382611ede565b9150602086019550600181019050611a97565b50849250505092915050565b6000611add82611ebd565b80845260208401935083602082028501611af685611ea5565b60005b84811015611b2f578383038852611b11838351611b94565b9250611b1c82611eeb565b9150602088019750600181019050611af9565b508196508694505050505092915050565b611b4981611f0a565b82525050565b611b5881611f16565b82525050565b6000611b6982611ed3565b808452611b7d816020860160208601611f6b565b611b8681611f9e565b602085010191505092915050565b6000611b9f82611ec8565b808452611bb3816020860160208601611f6b565b611bbc81611f9e565b602085010191505092915050565b6000602782527f4f6e6c792070617274206f776e65722063616e2063616c6c207468697320667560208301527f6e6374696f6e2e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602a82527f4f6e6c7920666163746f7279206f776e65722063616e2063616c6c207468697360208301527f2066756e6374696f6e2e000000000000000000000000000000000000000000006040830152606082019050919050565b6000602082019050611c996000830184611b40565b92915050565b60006040820190508181036000830152611cb98185611b5e565b9050611cc86020830184611a68565b9392505050565b60006060820190508181036000830152611ce98186611b5e565b9050611cf86020830185611a68565b611d056040830184611a68565b949350505050565b600060c0820190508181036000830152611d278189611b5e565b9050611d366020830188611b4f565b611d436040830187611a68565b611d506060830186611b40565b8181036080830152611d628185611a77565b905081810360a0830152611d768184611ad2565b9050979650505050505050565b60006020820190508181036000830152611d9c81611bca565b9050919050565b60006020820190508181036000830152611dbc81611c27565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715611de657600080fd5b8060405250919050565b600067ffffffffffffffff821115611e0757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611e2f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611e5757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611e8357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000611f0382611f20565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4b82611f20565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611f89578082015181840152602081019050611f6e565b83811115611f98576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820084a33f54cacaa74ff3942f34ab59f5adc0a3b89b9a1be201c231037dcbb832c6c6578706572696d656e74616cf50037";

    protected FactoryParts(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FactoryParts(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<MarkedAsRecalledEventResponse> getMarkedAsRecalledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("MarkedAsRecalled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<MarkedAsRecalledEventResponse> responses = new ArrayList<MarkedAsRecalledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MarkedAsRecalledEventResponse typedResponse = new MarkedAsRecalledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MarkedAsRecalledEventResponse> markedAsRecalledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("MarkedAsRecalled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MarkedAsRecalledEventResponse>() {
            @Override
            public MarkedAsRecalledEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                MarkedAsRecalledEventResponse typedResponse = new MarkedAsRecalledEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnerChanged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnerChangedEventResponse> ownerChangedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnerChanged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> storePart(String _id, String _name, BigInteger _batch, List<String> _subContracts, List<String> _subIds) {
        final Function function = new Function(
                "storePart", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Int256(_batch), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_subContracts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.Utils.typeMap(_subIds, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, BigInteger, String, Boolean, List<String>, List<String>>> getPart(String _id) {
        final Function function = new Function("getPart", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, String, Boolean, List<String>, List<String>>>(
                new Callable<Tuple6<String, BigInteger, String, Boolean, List<String>, List<String>>>() {
                    @Override
                    public Tuple6<String, BigInteger, String, Boolean, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, String, Boolean, List<String>, List<String>>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                convertToNative((List<Address>) results.get(4).getValue()), 
                                convertToNative((List<Utf8String>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> markAsRecalled(String _id) {
        final Function function = new Function(
                "markAsRecalled", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String _id, String _newOwner) {
        final Function function = new Function(
                "changeOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<FactoryParts> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FactoryParts.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<FactoryParts> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FactoryParts.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static FactoryParts load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FactoryParts(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static FactoryParts load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FactoryParts(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class MarkedAsRecalledEventResponse {
        public Log log;

        public String id;

        public String owner;
    }

    public static class OwnerChangedEventResponse {
        public Log log;

        public String id;

        public String owner;

        public String newOwner;
    }
}
