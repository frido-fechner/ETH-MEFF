package com.ethmeff.factorybackend.blockchain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class FactoryParts extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b02806100606000396000f3fe608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632562678014610067578063ab9f2cfe146100a4578063c02f63f8146100e5578063d8f9d14414610122575b600080fd5b34801561007357600080fd5b5061008e60048036036100899190810190611593565b61015f565b60405161009b91906117ff565b60405180910390f35b3480156100b057600080fd5b506100cb60048036036100c691908101906114fe565b610605565b6040516100dc959493929190611888565b60405180910390f35b3480156100f157600080fd5b5061010c600480360361010791908101906114fe565b6108c8565b60405161011991906117ff565b60405180910390f35b34801561012e57600080fd5b506101496004803603610144919081019061153f565b610d54565b60405161015691906117ff565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e990611909565b60405180910390fd5b6101fa6111f3565b6001866040518082805190602001908083835b602083101515610232578051825260208201915060208101905060208303925061020d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060a06040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561030a5780601f106102df5761010080835404028352916020019161030a565b820191906000526020600020905b8154815290600101906020018083116102ed57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1615151515815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561046f578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b5050505050815260200190600101906103b3565b505050508152505090508481600001819052508381602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281608001819052506000816060019015159081151581525050806001876040518082805190602001908083835b60208310151561051757805182526020820191506020810190506020830392506104f2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061056692919061123b565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160030190805190602001906105f49291906112bb565b509050506001915050949350505050565b6060600080600060606106166111f3565b6001876040518082805190602001908083835b60208310151561064e5780518252602082019150602081019050602083039250610629565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060a06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1615151515815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561088b578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108775780601f1061084c57610100808354040283529160200191610877565b820191906000526020600020905b81548152906001019060200180831161085a57829003601f168201915b5050505050815260200190600101906107cf565b5050505081525050905080600001518160200151826040015183606001518460800151849450809050955095509550955095505091939590929450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095290611909565b60405180910390fd5b6109636111f3565b6001836040518082805190602001908083835b60208310151561099b5780518252602082019150602081019050602083039250610976565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060a06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1615151515815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610bd8578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc45780601f10610b9957610100808354040283529160200191610bc4565b820191906000526020600020905b815481529060010190602001808311610ba757829003601f168201915b505050505081526020019060010190610b1c565b5050505081525050905060018160600190151590811515815250507f335bde9076cb678512bc2e7a710c09fb60e557abcdf1b1b8e761c2ef5729a46c838260400151604051610c2892919061181a565b60405180910390a1806001846040518082805190602001908083835b602083101515610c695780518252602082019150602081019050602083039250610c44565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190610cb892919061123b565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019080519060200190610d469291906112bb565b509050506001915050919050565b6000610d5e6111f3565b6001846040518082805190602001908083835b602083101515610d965780518252602082019150602081019050602083039250610d71565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060a06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e6e5780601f10610e4357610100808354040283529160200191610e6e565b820191906000526020600020905b815481529060010190602001808311610e5157829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1615151515815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610fd3578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fbf5780601f10610f9457610100808354040283529160200191610fbf565b820191906000526020600020905b815481529060010190602001808311610fa257829003601f168201915b505050505081526020019060010190610f17565b50505050815250509050806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611051576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611048906118e9565b60405180910390fd5b60008160400151905083826040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816001866040518082805190602001908083835b6020831015156110cb57805182526020820191506020810190506020830392506110a6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061111a92919061123b565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160030190805190602001906111a89291906112bb565b509050507ff86060286164733a3b0bae3ba4b62f85dc6020ba2ee440318bf5b6be6d0d93a88582866040516111df9392919061184a565b60405180910390a160019250505092915050565b60a0604051908101604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061127c57805160ff19168380011785556112aa565b828001600101855582156112aa579182015b828111156112a957825182559160200191906001019061128e565b5b5090506112b7919061131b565b5090565b82805482825590600052602060002090810192821561130a579160200282015b828111156113095782518290805190602001906112f992919061123b565b50916020019190600101906112db565b5b5090506113179190611340565b5090565b61133d91905b80821115611339576000816000905550600101611321565b5090565b90565b61136991905b80821115611365576000818161135c919061136c565b50600101611346565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061139257506113b1565b601f0160209004906000526020600020908101906113b0919061131b565b5b50565b60006113c08235611a59565b905092915050565b600082601f83011215156113db57600080fd5b81356113ee6113e982611956565b611929565b9150818183526020840193506020810190508360005b83811015611434578135860161141a8882611452565b845260208401935060208301925050600181019050611404565b5050505092915050565b600061144a8235611a6b565b905092915050565b600082601f830112151561146557600080fd5b81356114786114738261197e565b611929565b9150808252602083016020830185838301111561149457600080fd5b61149f838284611a75565b50505092915050565b600082601f83011215156114bb57600080fd5b81356114ce6114c9826119aa565b611929565b915080825260208301602083018583830111156114ea57600080fd5b6114f5838284611a75565b50505092915050565b60006020828403121561151057600080fd5b600082013567ffffffffffffffff81111561152a57600080fd5b611536848285016114a8565b91505092915050565b6000806040838503121561155257600080fd5b600083013567ffffffffffffffff81111561156c57600080fd5b611578858286016114a8565b9250506020611589858286016113b4565b9150509250929050565b600080600080608085870312156115a957600080fd5b600085013567ffffffffffffffff8111156115c357600080fd5b6115cf878288016114a8565b945050602085013567ffffffffffffffff8111156115ec57600080fd5b6115f8878288016114a8565b93505060406116098782880161143e565b925050606085013567ffffffffffffffff81111561162657600080fd5b611632878288016113c8565b91505092959194509250565b61164781611a11565b82525050565b6000611658826119e3565b80845260208401935083602082028501611671856119d6565b60005b848110156116aa57838303885261168c83835161170f565b925061169782611a04565b9150602088019750600181019050611674565b508196508694505050505092915050565b6116c481611a23565b82525050565b6116d381611a2f565b82525050565b60006116e4826119f9565b8084526116f8816020860160208601611a84565b61170181611ab7565b602085010191505092915050565b600061171a826119ee565b80845261172e816020860160208601611a84565b61173781611ab7565b602085010191505092915050565b6000602782527f4f6e6c792070617274206f776e65722063616e2063616c6c207468697320667560208301527f6e6374696f6e2e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602a82527f4f6e6c7920666163746f7279206f776e65722063616e2063616c6c207468697360208301527f2066756e6374696f6e2e000000000000000000000000000000000000000000006040830152606082019050919050565b600060208201905061181460008301846116bb565b92915050565b6000604082019050818103600083015261183481856116d9565b9050611843602083018461163e565b9392505050565b6000606082019050818103600083015261186481866116d9565b9050611873602083018561163e565b611880604083018461163e565b949350505050565b600060a08201905081810360008301526118a281886116d9565b90506118b160208301876116ca565b6118be604083018661163e565b6118cb60608301856116bb565b81810360808301526118dd818461164d565b90509695505050505050565b6000602082019050818103600083015261190281611745565b9050919050565b60006020820190508181036000830152611922816117a2565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561194c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561196d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561199557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156119c157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000611a1c82611a39565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a6482611a39565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611aa2578082015181840152602081019050611a87565b83811115611ab1576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820e579f26df0fc9e12445470b1381cb556f4513fedf7341c1352b77bb47a0b36356c6578706572696d656e74616cf50037";

    protected FactoryParts(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FactoryParts(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<MarkedAsRecalledEventResponse> getMarkedAsRecalledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("MarkedAsRecalled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<MarkedAsRecalledEventResponse> responses = new ArrayList<MarkedAsRecalledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MarkedAsRecalledEventResponse typedResponse = new MarkedAsRecalledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MarkedAsRecalledEventResponse> markedAsRecalledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("MarkedAsRecalled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MarkedAsRecalledEventResponse>() {
            @Override
            public MarkedAsRecalledEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                MarkedAsRecalledEventResponse typedResponse = new MarkedAsRecalledEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnerChanged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnerChangedEventResponse> ownerChangedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnerChanged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> storePart(String _id, String _name, BigInteger _batch, List<String> _previousIds) {
        final Function function = new Function(
                "storePart", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Int256(_batch), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.Utils.typeMap(_previousIds, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, String, Boolean, List<String>>> getPart(String _id) {
        final Function function = new Function("getPart", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, String, Boolean, List<String>>>(
                new Callable<Tuple5<String, BigInteger, String, Boolean, List<String>>>() {
                    @Override
                    public Tuple5<String, BigInteger, String, Boolean, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, String, Boolean, List<String>>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                convertToNative((List<Utf8String>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> markAsRecalled(String _id) {
        final Function function = new Function(
                "markAsRecalled", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String _id, String _newOwner) {
        final Function function = new Function(
                "changeOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<FactoryParts> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FactoryParts.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<FactoryParts> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FactoryParts.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static FactoryParts load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FactoryParts(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static FactoryParts load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FactoryParts(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class MarkedAsRecalledEventResponse {
        public Log log;

        public String id;

        public String owner;
    }

    public static class OwnerChangedEventResponse {
        public Log log;

        public String id;

        public String owner;

        public String newOwner;
    }
}
